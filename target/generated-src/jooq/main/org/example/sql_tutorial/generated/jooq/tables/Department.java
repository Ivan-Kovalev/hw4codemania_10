/*
 * This file is generated by jOOQ.
 */
package org.example.sql_tutorial.generated.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.example.sql_tutorial.generated.jooq.Keys;
import org.example.sql_tutorial.generated.jooq.Public;
import org.example.sql_tutorial.generated.jooq.tables.Doctor.DoctorPath;
import org.example.sql_tutorial.generated.jooq.tables.HospitalWard.HospitalWardPath;
import org.example.sql_tutorial.generated.jooq.tables.records.DepartmentRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Department extends TableImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.department</code>
     */
    public static final Department DEPARTMENT = new Department();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRecord> getRecordType() {
        return DepartmentRecord.class;
    }

    /**
     * The column <code>public.department.id</code>.
     */
    public final TableField<DepartmentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.department.hospital_wards</code>.
     */
    public final TableField<DepartmentRecord, Long> HOSPITAL_WARDS = createField(DSL.name("hospital_wards"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.department.is_full</code>.
     */
    public final TableField<DepartmentRecord, Boolean> IS_FULL = createField(DSL.name("is_full"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.department.quarantine</code>.
     */
    public final TableField<DepartmentRecord, Boolean> QUARANTINE = createField(DSL.name("quarantine"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.department.opening</code>.
     */
    public final TableField<DepartmentRecord, OffsetDateTime> OPENING = createField(DSL.name("opening"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Department(Name alias, Table<DepartmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Department(Name alias, Table<DepartmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    public Department(String alias) {
        this(DSL.name(alias), DEPARTMENT);
    }

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    public Department(Name alias) {
        this(alias, DEPARTMENT);
    }

    /**
     * Create a <code>public.department</code> table reference
     */
    public Department() {
        this(DSL.name("department"), null);
    }

    public <O extends Record> Department(Table<O> path, ForeignKey<O, DepartmentRecord> childPath, InverseForeignKey<O, DepartmentRecord> parentPath) {
        super(path, childPath, parentPath, DEPARTMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DepartmentPath extends Department implements Path<DepartmentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DepartmentPath(Table<O> path, ForeignKey<O, DepartmentRecord> childPath, InverseForeignKey<O, DepartmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DepartmentPath(Name alias, Table<DepartmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DepartmentPath as(String alias) {
            return new DepartmentPath(DSL.name(alias), this);
        }

        @Override
        public DepartmentPath as(Name alias) {
            return new DepartmentPath(alias, this);
        }

        @Override
        public DepartmentPath as(Table<?> alias) {
            return new DepartmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DepartmentRecord, Integer> getIdentity() {
        return (Identity<DepartmentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DepartmentRecord> getPrimaryKey() {
        return Keys.DEPARTMENT_PKEY;
    }

    private transient DoctorPath _doctor;

    /**
     * Get the implicit to-many join path to the <code>public.doctor</code>
     * table
     */
    public DoctorPath doctor() {
        if (_doctor == null)
            _doctor = new DoctorPath(this, null, Keys.DOCTOR__DOCTOR_FK1.getInverseKey());

        return _doctor;
    }

    private transient HospitalWardPath _hospitalWard;

    /**
     * Get the implicit to-many join path to the
     * <code>public.hospital_ward</code> table
     */
    public HospitalWardPath hospitalWard() {
        if (_hospitalWard == null)
            _hospitalWard = new HospitalWardPath(this, null, Keys.HOSPITAL_WARD__HOSPITAL_WARD_FK2.getInverseKey());

        return _hospitalWard;
    }

    @Override
    public Department as(String alias) {
        return new Department(DSL.name(alias), this);
    }

    @Override
    public Department as(Name alias) {
        return new Department(alias, this);
    }

    @Override
    public Department as(Table<?> alias) {
        return new Department(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(String name) {
        return new Department(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Name name) {
        return new Department(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Table<?> name) {
        return new Department(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Condition condition) {
        return new Department(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
