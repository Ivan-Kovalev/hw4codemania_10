/*
 * This file is generated by jOOQ.
 */
package org.example.sql_tutorial.generated.jooq;


import org.example.sql_tutorial.generated.jooq.tables.Department;
import org.example.sql_tutorial.generated.jooq.tables.Doctor;
import org.example.sql_tutorial.generated.jooq.tables.HospitalWard;
import org.example.sql_tutorial.generated.jooq.tables.Nurse;
import org.example.sql_tutorial.generated.jooq.tables.Patient;
import org.example.sql_tutorial.generated.jooq.tables.records.DepartmentRecord;
import org.example.sql_tutorial.generated.jooq.tables.records.DoctorRecord;
import org.example.sql_tutorial.generated.jooq.tables.records.HospitalWardRecord;
import org.example.sql_tutorial.generated.jooq.tables.records.NurseRecord;
import org.example.sql_tutorial.generated.jooq.tables.records.PatientRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DepartmentRecord> DEPARTMENT_PKEY = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("department_pkey"), new TableField[] { Department.DEPARTMENT.ID }, true);
    public static final UniqueKey<DoctorRecord> DOCTOR_PKEY = Internal.createUniqueKey(Doctor.DOCTOR, DSL.name("doctor_pkey"), new TableField[] { Doctor.DOCTOR.ID }, true);
    public static final UniqueKey<HospitalWardRecord> HOSPITAL_WARD_PKEY = Internal.createUniqueKey(HospitalWard.HOSPITAL_WARD, DSL.name("hospital_ward_pkey"), new TableField[] { HospitalWard.HOSPITAL_WARD.ID }, true);
    public static final UniqueKey<NurseRecord> NURSE_PKEY = Internal.createUniqueKey(Nurse.NURSE, DSL.name("nurse_pkey"), new TableField[] { Nurse.NURSE.ID }, true);
    public static final UniqueKey<PatientRecord> PACIENT_PKEY = Internal.createUniqueKey(Patient.PATIENT, DSL.name("pacient_pkey"), new TableField[] { Patient.PATIENT.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DoctorRecord, DepartmentRecord> DOCTOR__DOCTOR_FK1 = Internal.createForeignKey(Doctor.DOCTOR, DSL.name("doctor_fk1"), new TableField[] { Doctor.DOCTOR.DEPARTMENT_ID }, Keys.DEPARTMENT_PKEY, new TableField[] { Department.DEPARTMENT.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<HospitalWardRecord, NurseRecord> HOSPITAL_WARD__HOSPITAL_WARD_FK1 = Internal.createForeignKey(HospitalWard.HOSPITAL_WARD, DSL.name("hospital_ward_fk1"), new TableField[] { HospitalWard.HOSPITAL_WARD.NURSE_ID }, Keys.NURSE_PKEY, new TableField[] { Nurse.NURSE.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<HospitalWardRecord, DepartmentRecord> HOSPITAL_WARD__HOSPITAL_WARD_FK2 = Internal.createForeignKey(HospitalWard.HOSPITAL_WARD, DSL.name("hospital_ward_fk2"), new TableField[] { HospitalWard.HOSPITAL_WARD.DEPARTMENT_ID }, Keys.DEPARTMENT_PKEY, new TableField[] { Department.DEPARTMENT.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NurseRecord, DoctorRecord> NURSE__NURSE_FK1 = Internal.createForeignKey(Nurse.NURSE, DSL.name("nurse_fk1"), new TableField[] { Nurse.NURSE.DOCTOR_ID }, Keys.DOCTOR_PKEY, new TableField[] { Doctor.DOCTOR.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PatientRecord, DoctorRecord> PATIENT__PACIENT_FK1 = Internal.createForeignKey(Patient.PATIENT, DSL.name("pacient_fk1"), new TableField[] { Patient.PATIENT.DOCTOR_ID }, Keys.DOCTOR_PKEY, new TableField[] { Doctor.DOCTOR.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PatientRecord, HospitalWardRecord> PATIENT__PACIENT_FK2 = Internal.createForeignKey(Patient.PATIENT, DSL.name("pacient_fk2"), new TableField[] { Patient.PATIENT.HOSPITAL_WARD_ID }, Keys.HOSPITAL_WARD_PKEY, new TableField[] { HospitalWard.HOSPITAL_WARD.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
