/*
 * This file is generated by jOOQ.
 */
package org.example.sql_tutorial.generated.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.example.sql_tutorial.generated.jooq.Keys;
import org.example.sql_tutorial.generated.jooq.Public;
import org.example.sql_tutorial.generated.jooq.tables.Doctor.DoctorPath;
import org.example.sql_tutorial.generated.jooq.tables.HospitalWard.HospitalWardPath;
import org.example.sql_tutorial.generated.jooq.tables.records.NurseRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Nurse extends TableImpl<NurseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nurse</code>
     */
    public static final Nurse NURSE = new Nurse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NurseRecord> getRecordType() {
        return NurseRecord.class;
    }

    /**
     * The column <code>public.nurse.id</code>.
     */
    public final TableField<NurseRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.nurse.doctor_id</code>.
     */
    public final TableField<NurseRecord, Long> DOCTOR_ID = createField(DSL.name("doctor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.nurse.name</code>.
     */
    public final TableField<NurseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.nurse.years_of_experience</code>.
     */
    public final TableField<NurseRecord, Long> YEARS_OF_EXPERIENCE = createField(DSL.name("years_of_experience"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.nurse.graduation_date</code>.
     */
    public final TableField<NurseRecord, OffsetDateTime> GRADUATION_DATE = createField(DSL.name("graduation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.nurse.employment_date</code>.
     */
    public final TableField<NurseRecord, OffsetDateTime> EMPLOYMENT_DATE = createField(DSL.name("employment_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Nurse(Name alias, Table<NurseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Nurse(Name alias, Table<NurseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.nurse</code> table reference
     */
    public Nurse(String alias) {
        this(DSL.name(alias), NURSE);
    }

    /**
     * Create an aliased <code>public.nurse</code> table reference
     */
    public Nurse(Name alias) {
        this(alias, NURSE);
    }

    /**
     * Create a <code>public.nurse</code> table reference
     */
    public Nurse() {
        this(DSL.name("nurse"), null);
    }

    public <O extends Record> Nurse(Table<O> path, ForeignKey<O, NurseRecord> childPath, InverseForeignKey<O, NurseRecord> parentPath) {
        super(path, childPath, parentPath, NURSE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NursePath extends Nurse implements Path<NurseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NursePath(Table<O> path, ForeignKey<O, NurseRecord> childPath, InverseForeignKey<O, NurseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NursePath(Name alias, Table<NurseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NursePath as(String alias) {
            return new NursePath(DSL.name(alias), this);
        }

        @Override
        public NursePath as(Name alias) {
            return new NursePath(alias, this);
        }

        @Override
        public NursePath as(Table<?> alias) {
            return new NursePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NurseRecord, Integer> getIdentity() {
        return (Identity<NurseRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NurseRecord> getPrimaryKey() {
        return Keys.NURSE_PKEY;
    }

    @Override
    public List<ForeignKey<NurseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NURSE__NURSE_FK1);
    }

    private transient DoctorPath _doctor;

    /**
     * Get the implicit join path to the <code>public.doctor</code> table.
     */
    public DoctorPath doctor() {
        if (_doctor == null)
            _doctor = new DoctorPath(this, Keys.NURSE__NURSE_FK1, null);

        return _doctor;
    }

    private transient HospitalWardPath _hospitalWard;

    /**
     * Get the implicit to-many join path to the
     * <code>public.hospital_ward</code> table
     */
    public HospitalWardPath hospitalWard() {
        if (_hospitalWard == null)
            _hospitalWard = new HospitalWardPath(this, null, Keys.HOSPITAL_WARD__HOSPITAL_WARD_FK1.getInverseKey());

        return _hospitalWard;
    }

    @Override
    public Nurse as(String alias) {
        return new Nurse(DSL.name(alias), this);
    }

    @Override
    public Nurse as(Name alias) {
        return new Nurse(alias, this);
    }

    @Override
    public Nurse as(Table<?> alias) {
        return new Nurse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nurse rename(String name) {
        return new Nurse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nurse rename(Name name) {
        return new Nurse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nurse rename(Table<?> name) {
        return new Nurse(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nurse where(Condition condition) {
        return new Nurse(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nurse where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nurse where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nurse where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nurse where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nurse where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nurse where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nurse where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nurse whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nurse whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
