/*
 * This file is generated by jOOQ.
 */
package org.example.sql_tutorial.generated.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.example.sql_tutorial.generated.jooq.Keys;
import org.example.sql_tutorial.generated.jooq.Public;
import org.example.sql_tutorial.generated.jooq.tables.Department.DepartmentPath;
import org.example.sql_tutorial.generated.jooq.tables.Nurse.NursePath;
import org.example.sql_tutorial.generated.jooq.tables.Patient.PatientPath;
import org.example.sql_tutorial.generated.jooq.tables.records.HospitalWardRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HospitalWard extends TableImpl<HospitalWardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.hospital_ward</code>
     */
    public static final HospitalWard HOSPITAL_WARD = new HospitalWard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HospitalWardRecord> getRecordType() {
        return HospitalWardRecord.class;
    }

    /**
     * The column <code>public.hospital_ward.id</code>.
     */
    public final TableField<HospitalWardRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.hospital_ward.nurse_id</code>.
     */
    public final TableField<HospitalWardRecord, Long> NURSE_ID = createField(DSL.name("nurse_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.hospital_ward.department_id</code>.
     */
    public final TableField<HospitalWardRecord, Long> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.hospital_ward.number_of_sleeping_places</code>.
     */
    public final TableField<HospitalWardRecord, Long> NUMBER_OF_SLEEPING_PLACES = createField(DSL.name("number_of_sleeping_places"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.hospital_ward.is_full</code>.
     */
    public final TableField<HospitalWardRecord, Boolean> IS_FULL = createField(DSL.name("is_full"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private HospitalWard(Name alias, Table<HospitalWardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HospitalWard(Name alias, Table<HospitalWardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.hospital_ward</code> table reference
     */
    public HospitalWard(String alias) {
        this(DSL.name(alias), HOSPITAL_WARD);
    }

    /**
     * Create an aliased <code>public.hospital_ward</code> table reference
     */
    public HospitalWard(Name alias) {
        this(alias, HOSPITAL_WARD);
    }

    /**
     * Create a <code>public.hospital_ward</code> table reference
     */
    public HospitalWard() {
        this(DSL.name("hospital_ward"), null);
    }

    public <O extends Record> HospitalWard(Table<O> path, ForeignKey<O, HospitalWardRecord> childPath, InverseForeignKey<O, HospitalWardRecord> parentPath) {
        super(path, childPath, parentPath, HOSPITAL_WARD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HospitalWardPath extends HospitalWard implements Path<HospitalWardRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> HospitalWardPath(Table<O> path, ForeignKey<O, HospitalWardRecord> childPath, InverseForeignKey<O, HospitalWardRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HospitalWardPath(Name alias, Table<HospitalWardRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HospitalWardPath as(String alias) {
            return new HospitalWardPath(DSL.name(alias), this);
        }

        @Override
        public HospitalWardPath as(Name alias) {
            return new HospitalWardPath(alias, this);
        }

        @Override
        public HospitalWardPath as(Table<?> alias) {
            return new HospitalWardPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<HospitalWardRecord, Integer> getIdentity() {
        return (Identity<HospitalWardRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HospitalWardRecord> getPrimaryKey() {
        return Keys.HOSPITAL_WARD_PKEY;
    }

    @Override
    public List<ForeignKey<HospitalWardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HOSPITAL_WARD__HOSPITAL_WARD_FK1, Keys.HOSPITAL_WARD__HOSPITAL_WARD_FK2);
    }

    private transient NursePath _nurse;

    /**
     * Get the implicit join path to the <code>public.nurse</code> table.
     */
    public NursePath nurse() {
        if (_nurse == null)
            _nurse = new NursePath(this, Keys.HOSPITAL_WARD__HOSPITAL_WARD_FK1, null);

        return _nurse;
    }

    private transient DepartmentPath _department;

    /**
     * Get the implicit join path to the <code>public.department</code> table.
     */
    public DepartmentPath department() {
        if (_department == null)
            _department = new DepartmentPath(this, Keys.HOSPITAL_WARD__HOSPITAL_WARD_FK2, null);

        return _department;
    }

    private transient PatientPath _patient;

    /**
     * Get the implicit to-many join path to the <code>public.patient</code>
     * table
     */
    public PatientPath patient() {
        if (_patient == null)
            _patient = new PatientPath(this, null, Keys.PATIENT__PACIENT_FK2.getInverseKey());

        return _patient;
    }

    @Override
    public HospitalWard as(String alias) {
        return new HospitalWard(DSL.name(alias), this);
    }

    @Override
    public HospitalWard as(Name alias) {
        return new HospitalWard(alias, this);
    }

    @Override
    public HospitalWard as(Table<?> alias) {
        return new HospitalWard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HospitalWard rename(String name) {
        return new HospitalWard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HospitalWard rename(Name name) {
        return new HospitalWard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HospitalWard rename(Table<?> name) {
        return new HospitalWard(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HospitalWard where(Condition condition) {
        return new HospitalWard(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HospitalWard where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HospitalWard where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HospitalWard where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HospitalWard where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HospitalWard where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HospitalWard where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HospitalWard where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HospitalWard whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HospitalWard whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
